<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>it.sk.alfresco</groupId>
  <artifactId>lambdalf</artifactId>
  <packaging>amp</packaging>
  <name>[module] Lambdalf -- Clojure support for Alfresco</name>
  <parent>
    <artifactId>lambdalf-parent</artifactId>
    <groupId>it.sk.alfresco</groupId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <version>1.0-SNAPSHOT</version>
  <description>Install this module to unleash all the functional programming power your Alfresco can provide.</description>

  <properties>
    <env>local</env>
    <!-- Webapp used to test/develop locally the AMP -->
    <webapp.name>${artifactId}-webapp</webapp.name>
    <alfresco.data.location>/var/alfresco/lambdalf</alfresco.data.location>
    <alfresco.db.name>lambdalf</alfresco.db.name>
    <alfresco.db.username>alfresco</alfresco.db.username>
    <alfresco.db.password>alfresco</alfresco.db.password>
    <webapp.log.level>error</webapp.log.level>
    <webapp.log.dir></webapp.log.dir>

    <!--  Module specific build time properties -->
    <module.log.level>debug</module.log.level>
  </properties>
  <!--
            need to list these as a provided so that Maven doesn't download them
            and include them in the AMP, they are provided by Alfresco
        -->
  <dependencies>
    <dependency>
      <groupId>it.sk.alfresco</groupId>
      <artifactId>lambdalf-lib</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.6</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>it.sk.spring.surf.clojure</groupId>
      <artifactId>spring-webscripts-addon-clojure</artifactId>
      <version>1.0-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.extensions.surf</groupId>
      <artifactId>spring-surf</artifactId>
      <version>1.0.0.CI-SNAPSHOT</version>
      <scope>provided</scope>
    </dependency>
<!--
    <dependency>
      <groupId>org.springframework.extensions.surf</groupId>
      <artifactId>spring-webscripts</artifactId>
      <version>1.0.0.CI-SNAPSHOT</version>
      <scope>provided</scope>
    </dependency>
-->
    <!-- Don't add here amp dependencies as it will break amp packaging -->
  </dependencies>


  <build>
    <plugins>
      <plugin>
        <artifactId>maven-nosnapshot-plugin</artifactId>
        <groupId>com.sourcesense.maven</groupId>
        <version>0.0.6</version>
        <executions>
          <execution>
            <id>default</id>
            <phase>initialize</phase>
            <goals>
              <goal>strip</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.6</source>
          <target>1.6</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.alfresco.maven.plugin</groupId>
        <artifactId>maven-amp-plugin</artifactId>
        <version>3.0.4</version>
        <extensions>true</extensions>
        <configuration>
          <archive>
            <addMavenDescriptor>false</addMavenDescriptor>
          </archive>
        </configuration>
      </plugin>
    </plugins>
    <!--
        Copies and filters resources in build folder so maven-amp-plugin can
        pick them up
    -->
    <resources>
      <resource>
        <filtering>true</filtering>
        <directory>src/main/resources</directory>
        <excludes>
          <exclude>**README-*</exclude>
        </excludes>
      </resource>
      <!--
          Copies and filters AMP config in the proper package
          'alfresco/module/it.sk.alfresco.lambdalf' so to enforce full module
          naming single sourcing from POM properties
      -->
      <resource>
        <filtering>true</filtering>
        <directory>src/main/config</directory>
        <targetPath>alfresco/module/${groupId}.${artifactId}</targetPath>
        <excludes>
          <exclude>**README-*</exclude>
        </excludes>
      </resource>

      <!-- Clojure stuff -->
      <resource>
        <directory>src/main/clojure</directory>
      </resource>
    </resources>
  </build>
  <profiles>
    <!--
        Profile used to trigger war creation and integration within Jetty
        embedded
    -->
    <profile>
      <id>webapp</id>
      <build>
        <filters>
          <filter>src/test/properties/${env}/alfresco-global.properties</filter>
        </filters>
        <defaultGoal>jetty:run-exploded</defaultGoal>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <id>unpack-amps</id>
                <phase>process-resources</phase>
                <goals>
                  <goal>unpack-dependencies</goal>
                </goals>
                <configuration>
                  <includeTypes>amp</includeTypes>
                  <outputDirectory>${project.build.directory}/${webapp.name}</outputDirectory>
                  <excludes>META*</excludes>
                </configuration>
              </execution>
            </executions>
            <dependencies>
              <!--
                  This is required to be re-defined explicitly at plugin level as
                  otherwise the 'amp' extension unArchiver won't be available to
                  the maven-dependency-plugin
              -->
              <dependency>
                <groupId>org.alfresco.maven.plugin</groupId>
                <artifactId>maven-amp-plugin</artifactId>
                <version>3.0.4</version>
              </dependency>
            </dependencies>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-war-plugin</artifactId>
            <version>2.1</version>
            <executions>
              <!-- Runs war packaging when 'integration-test' phase is called -->
              <execution>
                <id>it</id>
                <phase>package</phase>
                <goals>
                  <goal>exploded</goal>
                </goals>
                <configuration>
                  <archiveClasses>true</archiveClasses>
                </configuration>
              </execution>
            </executions>
            <configuration>
              <primaryArtifact>false</primaryArtifact>
              <!--
                  Don't remove the following line otherwise WAR and AMP builds
                  will be done in the same folder, with unexpected results
              -->
              <webappDirectory>${project.build.directory}/${webapp.name}</webappDirectory>
              <archive>
                <addMavenDescriptor>false</addMavenDescriptor>
              </archive>
              <warSourceExcludes>licenses/**</warSourceExcludes>
              <webResources>
                <resource>
                  <directory>${project.build.testOutputDirectory}</directory>
                  <targetPath>WEB-INF/classes</targetPath>
                  <filtering>true</filtering>
                  <includes>
                    <include>**</include>
                  </includes>
                </resource>
                <!-- Here we add default this AMP web/ resources-->
                <resource>
                  <directory>src/main/webapp</directory>
                  <targetPath>WEB-INF/licenses</targetPath>
                  <includes>
                    <include>licenses/*.*</include>
                  </includes>
                  <filtering>false</filtering>
                </resource>
                <resource>
                  <directory>src/test/webapp</directory>
                  <targetPath>WEB-INF</targetPath>
                  <filtering>true</filtering>
                </resource>
              </webResources>
            </configuration>
            <dependencies>
              <!--
                  This is required to be re-defined explicitly at plugin level as
                  otherwise the 'amp' extension unArchiver won't be available to
                  the maven-war-plugin
              -->
              <dependency>
                <groupId>org.alfresco.maven.plugin</groupId>
                <artifactId>maven-amp-plugin</artifactId>
                <version>3.0.4</version>
              </dependency>
            </dependencies>
          </plugin>
          <plugin>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>maven-jetty-plugin</artifactId>
            <version>6.1.26</version>
            <executions>
              <!-- Runs jetty when 'integration-test' phase is called -->
              <execution>
                <id>it</id>
                <phase>integration-test</phase>
                <goals>
                  <goal>run-exploded</goal>
                </goals>
                <configuration>
                  <contextPath>/${webapp.name}</contextPath>
                  <webApp>${project.build.directory}/${webapp.name}</webApp>
                  <scanIntervalSeconds>10</scanIntervalSeconds>
                  <connectors>
                    <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
                      <port>9090</port>
                      <maxIdleTime>60000</maxIdleTime>
                    </connector>
                  </connectors>
                </configuration>
              </execution>
            </executions>
            <dependencies>
              <dependency>
                <groupId>it.sk.alfresco</groupId>
                <artifactId>h2-support</artifactId>
                <version>1.0</version>
              </dependency>
              <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>1.3.158</version>
              </dependency>
            </dependencies>
          </plugin>
        </plugins>
        <!--
            When invoking 'mvn integration-test', the following alf configs are
            added to the test war in order to be able to run it seamlessly. NB:
            the application.properties file is filtered with alfresco.db.name
            and alf.data.location POM properties as default configuration
        -->
        <testResources>
          <!-- Includes default properties  for alfresco test war -->
          <testResource>
            <filtering>true</filtering>
            <directory>src/test/properties/${env}</directory>
            <!--<targetPath>alfresco/module/${groupId}.${artifactId}</targetPath>-->
          </testResource>

          <!--
              src/main/config/ is copied into ==>
              target/test-classes/alfresco/module/it.sk.alfresco.lambdalf to be
              picked up by the maven-war plugin Best practice tacken from
              recordsmanagement.amp, is enforced troughout the whole archetype.
              This convention is also used for module.properties filtering.
          -->
          <testResource>
            <filtering>true</filtering>
            <directory>.</directory>
            <includes>
              <include>module.properties</include>
            </includes>
            <targetPath>alfresco/module/${groupId}.${artifactId}</targetPath>
          </testResource>
        </testResources>
      </build>
      <!--
          Here you can add test dependencies you want to have included in the
          the WAR (not in the AMP, built in the main profile) | | Typical use
          case: add here additional AMPs that you want to test compatibility
          of with the current module |
      -->
      <dependencies>
        <!--
            This is the alfresco version you're testing the AMP against. Don't
            remove if you want jetty to be able to deploy a WAR :)
        -->
        <dependency>
          <groupId>org.alfresco</groupId>
          <artifactId>alfresco</artifactId>
          <version>${alfresco.version}</version>
          <type>war</type>
          <classifier>${alfresco.classifier}</classifier>
        </dependency>
      </dependencies>
    </profile>

  </profiles>
</project>
